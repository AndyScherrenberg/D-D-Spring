package com.frysning.springdnd.trait;import com.frysning.springdnd.stats.ReadableStats;import com.frysning.springdnd.stats.Stat;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;public class ReadableTraitTests {    @Test    public void testTraitWithFormattedValues() {        Trait trait = new Trait(1L, "TEST",            "A {0}, must do [STR] and a [DEX] and a [WIS] and [STR] and [CHA]");        String result = "A Object, must do DC 10 STR and a DC 10 DEX and a DC 10 WIS and DC 10 STR and DC 14 CHA";        ReadableStats readableStats = new ReadableStats(createStat());        ReadableTrait readableTrait = new ReadableTrait(trait, readableStats, 2, "Object");        Assertions.assertEquals(result, readableTrait.getDescription());    }    @Test    public void testTraitWithoutFormattedValues() {        Trait trait = new Trait(1L, "TEST",            "A {0} can sleep");        String result = "A Object can sleep";        ReadableStats readableStats = new ReadableStats(createStat());        ReadableTrait readableTrait = new ReadableTrait(trait, readableStats, 2, "Object");        Assertions.assertEquals(result, readableTrait.getDescription());    }    @Test    public void traitWithoutAnything() {        Trait trait = new Trait(1L, "TEST",            "Walks in WATER");        String result = "Walks in WATER";        ReadableStats readableStats = new ReadableStats(createStat());        ReadableTrait readableTrait = new ReadableTrait(trait, readableStats, 2, "Object");        Assertions.assertEquals(result, readableTrait.getDescription());    }    @Test    public void traitWithOnlySavingThrow() {        Trait trait = new Trait(1L, "TEST",            "Walks in WATER [CHA]");        String result = "Walks in WATER DC 14 CHA";        ReadableStats readableStats = new ReadableStats(createStat());        ReadableTrait readableTrait = new ReadableTrait(trait, readableStats, 2, "Object");        Assertions.assertEquals(result, readableTrait.getDescription());    }    private Stat createStat() {        Stat stat = new Stat();        stat.setCharisma(18);        stat.setStrength(10);        stat.setWisdom(10);        stat.setDexterity(10);        stat.setConstitution(10);        stat.setIntelligence(10);        return stat;    }}