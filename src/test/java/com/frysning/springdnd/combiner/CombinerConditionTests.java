package com.frysning.springdnd.combiner;import com.frysning.springdnd.conditions.Condition;import com.frysning.springdnd.enemy.Enemy;import com.frysning.springdnd.race.Race;import org.junit.jupiter.api.Test;import java.util.Arrays;import java.util.List;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.containsInAnyOrder;public class CombinerConditionTests {	Condition blinded = new Condition(1L, "blinded", "");	Condition deafened = new Condition(2L, "deafened", "");	Condition dazed = new Condition(3L, "dazed","");	Condition confused = new Condition(4L, "confused", "");	Condition crippled = new Condition(5L, "crippled", "");	Condition bleeding = new Condition(6L, "bleeding", "");	Condition hunted = new Condition(6L, "hunted", "");	Condition hangover = new Condition(6L, "hangover", "");	@Test	public void combinedConditionWeaknessCreatesCorrectList() {		List<Condition> assertionList = Arrays.asList(deafened, confused, dazed);		List<Condition> enemyWeakness = Arrays.asList(confused, dazed);		List<Condition> raceWeakness = List.of(deafened, hunted, dazed);		List<Condition> raceResistance = List.of(hangover);		List<Condition> enemyResistance = List.of();		List<Condition> enemyImmunity = List.of(hunted);		List<Condition> raceImmunity = List.of();		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedWeakness = combined.getWeaknessToCondition();		assertThat("List equality without order",				assertionList, containsInAnyOrder(combinedWeakness.toArray()));	}	@Test	public void combinedResistanceCreatesCorrectList() {		List<Condition> testList = Arrays.asList(bleeding, hangover);		List<Condition> enemyWeakness = Arrays.asList(bleeding, crippled);		List<Condition> raceWeakness = List.of();		List<Condition> raceResistance = List.of(crippled);		List<Condition> enemyResistance = List.of(hangover);		List<Condition> raceImmunity = List.of(bleeding);		List<Condition> enemyImmunity = List.of();		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedResistance = combined.getResistanceToCondition();		assertThat("List equality without order",				testList, containsInAnyOrder(combinedResistance.toArray()));	}	@Test	public void combinedImmunityCreatesCorrectList() {		List<Condition> testList = Arrays.asList(bleeding, crippled);		List<Condition> enemyWeakness = List.of(deafened);		List<Condition> raceWeakness = List.of(dazed);		List<Condition> raceResistance = List.of();		List<Condition> enemyResistance = List.of(crippled);		List<Condition> enemyImmunity = List.of(bleeding, dazed);		List<Condition> raceImmunity = List.of(crippled, bleeding, deafened);		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToCondition();		assertThat("List equality without order",				testList, containsInAnyOrder(combinedImmunity.toArray()));	}	@Test	public void combinedDataForDamageTypeIsCorrect() {		List<Condition> weaknessList = List.of(blinded, dazed);		List<Condition> resistList = List.of(confused, hangover);		List<Condition> immunlist = List.of(crippled, bleeding);		List<Condition> enemyWeakness = List.of(blinded, confused);		List<Condition> raceWeakness = List.of(dazed, hunted);		List<Condition> raceResistance = List.of(hunted, hangover);		List<Condition> enemyResistance = List.of(bleeding);		List<Condition> enemyImmunity = List.of(crippled);		List<Condition> raceImmunity = List.of(confused, bleeding);		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToCondition();		var combinedWeakness = combined.getWeaknessToCondition();		var combinedResistance = combined.getResistanceToCondition();		assertThat("combinedImmunity equality without order",				immunlist, containsInAnyOrder(combinedImmunity.toArray()));		assertThat("combinedWeakness equality without order",				weaknessList, containsInAnyOrder(combinedWeakness.toArray()));		assertThat("combinedResistance equality without order",				resistList, containsInAnyOrder(combinedResistance.toArray()));	}}