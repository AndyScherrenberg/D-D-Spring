package com.frysning.springdnd.combiner;import com.frysning.springdnd.conditions.ConditionType;import com.frysning.springdnd.enemy.Enemy;import com.frysning.springdnd.race.Race;import org.junit.jupiter.api.Test;import java.util.Arrays;import java.util.Comparator;import java.util.List;import static org.junit.jupiter.api.Assertions.assertIterableEquals;public class CombinerConditionTestsType {	ConditionType blinded = new ConditionType(1L, "blinded", "");	ConditionType deafened = new ConditionType(2L, "deafened", "");	ConditionType dazed = new ConditionType(3L, "dazed", "");	ConditionType confused = new ConditionType(4L, "confused", "");	ConditionType crippled = new ConditionType(5L, "crippled", "");	ConditionType bleeding = new ConditionType(6L, "bleeding", "");	ConditionType hunted = new ConditionType(6L, "hunted", "");	ConditionType hangover = new ConditionType(6L, "hangover", "");	@Test	public void combinedConditionWeaknessCreatesCorrectList() {		List<ConditionType> assertionList = Arrays.asList(deafened, confused, dazed);		List<ConditionType> enemyWeakness = Arrays.asList(confused, dazed);		List<ConditionType> raceWeakness = List.of(deafened, hunted, dazed);		List<ConditionType> raceResistance = List.of(hangover);		List<ConditionType> enemyResistance = List.of();		List<ConditionType> enemyImmunity = List.of(hunted);		List<ConditionType> raceImmunity = List.of();		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedWeakness = combined.getWeaknessToCondition();		assertionList.sort(Comparator.comparing(ConditionType::getName));		assertIterableEquals(assertionList, combinedWeakness);	}	@Test	public void combinedResistanceCreatesCorrectList() {		List<ConditionType> testList = Arrays.asList(hangover);		List<ConditionType> enemyWeakness = Arrays.asList(bleeding, crippled);		List<ConditionType> raceWeakness = List.of();		List<ConditionType> raceResistance = List.of(crippled);		List<ConditionType> enemyResistance = List.of(hangover);		List<ConditionType> raceImmunity = List.of(bleeding);		List<ConditionType> enemyImmunity = List.of();		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedResistance = combined.getResistanceToCondition();		testList.sort(Comparator.comparing(ConditionType::getName));		assertIterableEquals(testList, combinedResistance);	}	@Test	public void combinedImmunityCreatesCorrectList() {		List<ConditionType> testList = Arrays.asList(bleeding, crippled);		List<ConditionType> enemyWeakness = List.of(deafened);		List<ConditionType> raceWeakness = List.of(dazed);		List<ConditionType> raceResistance = List.of();		List<ConditionType> enemyResistance = List.of(crippled);		List<ConditionType> enemyImmunity = List.of(bleeding, dazed);		List<ConditionType> raceImmunity = List.of(crippled, bleeding, deafened);		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToCondition();		testList.sort(Comparator.comparing(ConditionType::getName));		assertIterableEquals(testList, combinedImmunity);	}	@Test	public void combinedDataForDamageTypeIsCorrect() {		List<ConditionType> weaknessList = new java.util.ArrayList<>(List.of(blinded, dazed));		List<ConditionType> resistList = new java.util.ArrayList<>(List.of(hangover));		List<ConditionType> immunlist = new java.util.ArrayList<>(List.of(crippled, bleeding));		weaknessList.sort(Comparator.comparing(ConditionType::getName));		resistList.sort(Comparator.comparing(ConditionType::getName));		immunlist.sort(Comparator.comparing(ConditionType::getName));		List<ConditionType> enemyWeakness = List.of(blinded, confused);		List<ConditionType> raceWeakness = List.of(dazed, hunted);		List<ConditionType> raceResistance = List.of(hunted, hangover);		List<ConditionType> enemyResistance = List.of(bleeding);		List<ConditionType> enemyImmunity = List.of(crippled);		List<ConditionType> raceImmunity = List.of(confused, bleeding);		Race race = new Race();		race.setConditionWeakness(raceWeakness);		race.setConditionResistance(raceResistance);		race.setConditionImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setConditionWeakness(enemyWeakness);		enemy.setConditionResistance(enemyResistance);		enemy.setConditionImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToCondition();		var combinedWeakness = combined.getWeaknessToCondition();		var combinedResistance = combined.getResistanceToCondition();		assertIterableEquals(immunlist, combinedImmunity);		assertIterableEquals(weaknessList, combinedWeakness);		assertIterableEquals(resistList, combinedResistance);	}}