package com.frysning.springdnd.combiner;import com.frysning.springdnd.damage_type.DamageType;import com.frysning.springdnd.enemy.Enemy;import com.frysning.springdnd.race.Race;import org.junit.jupiter.api.Test;import java.util.Arrays;import java.util.Comparator;import java.util.List;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.containsInAnyOrder;import static org.junit.jupiter.api.Assertions.assertIterableEquals;public class CombinerDamageTests {	DamageType fire = new DamageType(1L, "Fire");	DamageType ice = new DamageType(2L, "Ice");	DamageType water = new DamageType(3L, "Water");	DamageType lighting = new DamageType(4L, "Lighting");	DamageType sound = new DamageType(5L, "Sound");	DamageType earth = new DamageType(6L, "Earth");	DamageType piercing = new DamageType(6L, "Piercing");	DamageType slashing = new DamageType(6L, "Slash");	@Test	public void combinedWeaknessCreatesCorrectList() {		List<DamageType> testList = Arrays.asList(fire, ice, water);		List<DamageType> enemyWeakness = Arrays.asList(ice, water);		List<DamageType> raceWeakness = List.of(fire, sound, water);		List<DamageType> raceResistance = List.of(lighting);		List<DamageType> enemyResistance = List.of();		List<DamageType> enemyImmunity = List.of(sound);		List<DamageType> raceImmunity = List.of();		Race race = new Race();		race.setDamageWeakness(raceWeakness);		race.setDamageResistance(raceResistance);		race.setDamageImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setDamageWeakness(enemyWeakness);		enemy.setDamageResistance(enemyResistance);		enemy.setDamageImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedWeakness = combined.getWeaknessToDamage();		testList.sort(Comparator.comparing(DamageType::getName));		assertIterableEquals(testList, combinedWeakness);	}	@Test	public void combinedResistanceCreatesCorrectList() {		List<DamageType> testList = Arrays.asList(fire);		List<DamageType> enemyWeakness = Arrays.asList(sound, water);		List<DamageType> raceWeakness = List.of();		List<DamageType> raceResistance = List.of(water);		List<DamageType> enemyResistance = List.of(fire);		List<DamageType> raceImmunity = List.of(sound);		List<DamageType> enemyImmunity = List.of();		Race race = new Race();		race.setDamageWeakness(raceWeakness);		race.setDamageResistance(raceResistance);		race.setDamageImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setDamageWeakness(enemyWeakness);		enemy.setDamageResistance(enemyResistance);		enemy.setDamageImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedResistance = combined.getResistanceToDamage();		testList.sort(Comparator.comparing(DamageType::getName));		assertIterableEquals(testList, combinedResistance);	}	@Test	public void combinedImmunityCreatesCorrectList() {		List<DamageType> testList = Arrays.asList(fire, water);		List<DamageType> enemyWeakness = List.of(sound);		List<DamageType> raceWeakness = List.of(ice);		List<DamageType> raceResistance = List.of();		List<DamageType> enemyResistance = List.of(water);		List<DamageType> enemyImmunity = List.of(fire, ice);		List<DamageType> raceImmunity = List.of(water, fire, sound);		Race race = new Race();		race.setDamageWeakness(raceWeakness);		race.setDamageResistance(raceResistance);		race.setDamageImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setDamageWeakness(enemyWeakness);		enemy.setDamageResistance(enemyResistance);		enemy.setDamageImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToDamage();		testList.sort(Comparator.comparing(DamageType::getName));		assertIterableEquals(testList, combinedImmunity);	}	@Test	public void combinedDataForDamageTypeIsCorrect() {		List<DamageType> weaknessList = new java.util.ArrayList<>(List.of(slashing, piercing));		List<DamageType> resistList = new java.util.ArrayList<>(List.of(sound));		List<DamageType> immunlist = new java.util.ArrayList<>(List.of(fire, water));		weaknessList.sort(Comparator.comparing(DamageType::getName));		resistList.sort(Comparator.comparing(DamageType::getName));		immunlist.sort(Comparator.comparing(DamageType::getName));		List<DamageType> enemyWeakness = List.of(slashing, earth);		List<DamageType> raceWeakness = List.of(piercing, lighting);		List<DamageType> raceResistance = List.of(lighting, sound);		List<DamageType> enemyResistance = List.of(water);		List<DamageType> enemyImmunity = List.of(fire);		List<DamageType> raceImmunity = List.of(earth, water);		Race race = new Race();		race.setDamageWeakness(raceWeakness);		race.setDamageResistance(raceResistance);		race.setDamageImmunity(raceImmunity);		Enemy enemy = new Enemy();		enemy.setDamageWeakness(enemyWeakness);		enemy.setDamageResistance(enemyResistance);		enemy.setDamageImmunity(enemyImmunity);		var combined = new Combined(enemy, race);		var combinedImmunity = combined.getImmunityToDamage();		var combinedWeakness = combined.getWeaknessToDamage();		var combinedResistance = combined.getResistanceToDamage();		assertIterableEquals(immunlist, combinedImmunity);		assertIterableEquals(weaknessList, combinedWeakness);		assertIterableEquals(resistList, combinedResistance);	}}