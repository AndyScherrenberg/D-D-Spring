package com.frysning.springdnd.speed;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import com.frysning.springdnd.speed_type.SpeedType;import com.frysning.util.DataCollection;import javax.persistence.*;import static com.frysning.util.Numbers.ReadableDecimal;@Entity@Table(name = "speedValue")public class SpeedValue {	@JsonProperty(index = 1)	private @Id	@GeneratedValue(strategy = GenerationType.IDENTITY) Long id;	@ManyToOne	@JoinColumn(name = "speedtype_id", referencedColumnName = "id", nullable = false)	private SpeedType speedType;	private int distance;	@Transient	private Long speedTypeId = -1L;	@Transient	private String speedTypeName = "";	public SpeedValue() {	}	public SpeedValue(Long id, SpeedType speedType, int distance) {		this.id = id;		this.speedType = speedType;		this.distance = distance;	}	public Long getId() {		return id;	}	public void setId(Long id) {		this.id = id;	}	public void setSpeedTypeId(Long id) {		speedTypeId = id;		createSpeedTypeForSearching();	}	public void setSpeedTypeName(String name) {		speedTypeName = name;		createSpeedTypeForSearching();	}	private void createSpeedTypeForSearching() {		speedType = new SpeedType(speedTypeId, speedTypeName);	}	@JsonIgnore	public String getSpeedName() {		if (speedType != null) {			return speedType.getName();		}		return "";	}	@JsonIgnore	public Long getSpeedTypeId() {		if (speedType != null) {			return speedType.getId();		}		return -1L;	}	public SpeedType getSpeedType() {		return this.speedType;	}	public void setSpeedType(SpeedType speedType) {		this.speedType = speedType;	}	@JsonIgnore	public int getDistance() {		return distance;	}	public void setDistance(int distance) {		this.distance = distance;	}	public String getRangeInFeet() {		return String.format("%d %s", distance, DataCollection.FEET);	}	public String getRangeInMeter() {		return String.format("%,.2f %s", ReadableDecimal(distance * DataCollection.FEET_TO_METER), DataCollection.METER);	}}