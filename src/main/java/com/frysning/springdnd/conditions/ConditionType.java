package com.frysning.springdnd.conditions;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import javax.persistence.*;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;@Entity@Table(name = "conditionType")public class ConditionType {	@JsonProperty(index = 1)	private @Id	@GeneratedValue(strategy = GenerationType.IDENTITY) Long id;	@JsonProperty(index = 2)	private String name;	@Column(length = 800)	private String description;	public ConditionType() {	}	public ConditionType(Long id, String name, String description) {		this.id = id;		this.name = name;		this.description = description;	}	public Long getId() {		return id;	}	public void setId(Long id) {		this.id = id;	}	public String getName() {		return name;	}	public void setName(String name) {		this.name = name;	}	@JsonIgnore	public String getInternalDescription() {		return description;	}	public void setDescription(String description) {		this.description = description;	}	public List<String> getDescription() {		return Arrays				.stream(description.split("-"))				.filter(s -> !s.isEmpty() || !s.isBlank())				.collect(Collectors.toList());	}	public boolean equals(ConditionType con) {		return (con.getName().equals(this.getName()) || con.getId().equals(this.getId()));	}}