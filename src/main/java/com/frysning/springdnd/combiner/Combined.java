package com.frysning.springdnd.combiner;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonPropertyOrder;import com.frysning.springdnd.action.Action;import com.frysning.springdnd.action.CalculatedAction;import com.frysning.springdnd.conditions.Condition;import com.frysning.springdnd.damage_type.DamageType;import com.frysning.springdnd.enemy.CalculatedSavingThrow;import com.frysning.springdnd.enemy.Enemy;import com.frysning.springdnd.language.Language;import com.frysning.springdnd.modifier_type.ModifierType;import com.frysning.springdnd.race.Race;import com.frysning.springdnd.size.Size;import com.frysning.springdnd.stats.ReadableStats;import com.frysning.springdnd.stats.Stat;import com.frysning.springdnd.trait.ReadableTrait;import com.frysning.springdnd.trait.Trait;import com.frysning.springdnd.speed.Speed;import java.util.*;import java.util.stream.Collectors;import static com.frysning.util.Predicates.distinctBy;import static java.util.Comparator.comparingInt;public class Combined {	private final Enemy enemy;	private final Race race;	public Combined(Enemy enemy, Race race) {		this.enemy = enemy;		this.race = race;	}	@JsonIgnore	public Enemy enemy() {		return enemy;	}	@JsonIgnore	public Race race() {		return race;	}	public String getName() {		return enemy.getName();	}	public String getRaceName() {		return race.getName();	}	public String getRaceType() {		return enemy.getRaceType().getName();	}	public ReadableStats getBaseStats() {		return enemy.getBaseStats();	}	public Stat getRacialStats() {		return race.getStat();	}	public String getArmorClass() {		return enemy.getAc();	}	public int getProficiencyBonus() {		return enemy.getProficiencyBonus();	}	public String getHitDice() {		return enemy.getHitDice();	}	public String getAlignment() {		return enemy.getAlignment();	}	public int getDefaultHitPoints() {		return enemy.getDefaultHitPoints();	}	public List<CalculatedSavingThrow> getCalculatedSavingThrows() {		return enemy.getSavingThrows().stream().map(				modifierId -> new CalculatedSavingThrow(ModifierType.getById(modifierId),						getCombinedStats(),						enemy().getProficiencyBonus())).collect(				Collectors.toList());	}	//Combined	public ReadableStats getCombinedStats() {		return new ReadableStats(enemy.getStat(), race.getStat());	}	public Size getSize() {		if (enemy.getSize().id != race.getSize().getId()) {			return race.getSize();		} else {			return enemy.getSize();		}	}	public List<Language> getLanguages() {		List<Language> enemyLanguages = enemy.getLanguages();		List<Language> raceLanguages = race.getLanguages();		enemyLanguages.removeAll(raceLanguages);		enemyLanguages.addAll(raceLanguages);		return enemyLanguages;	}	public List<Speed> getSpeed() {		var speedCollection = enemy.getSpeed();		//Remove duplicates		speedCollection.removeAll(race.getSpeed());		//Add new set of values		speedCollection.addAll(race.getSpeed());		return speedCollection				.stream()				.sorted(comparingInt(Speed::getRange).reversed())				.filter(distinctBy(Speed::getSpeedTypeId))				.collect(Collectors.toList());	}	public List<CalculatedAction> getActions() {		List<Action> actions = enemy.getActions();		actions.removeAll(race.getActions());		actions.addAll(race.getActions());		return createCalculatedActions(actions);	}	public List<CalculatedAction> getReactions() {		List<Action> reactions = enemy.getReactions();		reactions.removeAll(race.getReactions());		reactions.addAll(race.getReactions());		return createCalculatedActions(reactions);	}	private List<CalculatedAction> createCalculatedActions(List<Action> reactions) {		return reactions.stream()				.map(action -> new CalculatedAction(action, getCombinedStats(), enemy.getProficiencyBonus(), this.getName()))				.collect(Collectors.toList());	}	public List<ReadableTrait> getTraits() {		List<Trait> traits = enemy.getTraits();		traits.removeAll(race.getTraits());		traits.addAll(race.getTraits());		return traits.stream()				.map(trait -> new ReadableTrait(trait, getCombinedStats(), getProficiencyBonus(), this.getName()))				.collect(Collectors.toList());	}	/**	 * Weakness, Resistance and Immunity to Damage	 */	private List<DamageType> weaknessToDamage = new ArrayList<>();	private List<DamageType> resistanceToDamage = new ArrayList<>();	private List<DamageType> immunityToDamage = new ArrayList<>();	//Weakness	public List<DamageType> getWeaknessToDamage() {		if (!weaknessToDamage.isEmpty()) {			return weaknessToDamage;		}		weaknessToDamage = new ArrayList<>(enemy.getDamageWeakness());		weaknessToDamage.removeAll(race.getDamageWeakness());		weaknessToDamage.addAll(race.getDamageWeakness());		weaknessToDamage.removeAll(race.getDamageResistance());		weaknessToDamage.removeAll(enemy.getDamageResistance());		weaknessToDamage.removeAll(race.getDamageImmunity());		weaknessToDamage.removeAll(enemy.getDamageImmunity());		weaknessToDamage.sort(Comparator.comparing(DamageType::getName));		return weaknessToDamage;	}	public List<DamageType> getResistanceToDamage() {		if (!resistanceToDamage.isEmpty()) {			return resistanceToDamage;		}		resistanceToDamage = new ArrayList<>(enemy.getDamageResistance());		resistanceToDamage.removeAll(race.getDamageResistance());		resistanceToDamage.addAll(race.getDamageResistance());		List<DamageType> weaknessList = new ArrayList<>(enemy.getDamageWeakness());		weaknessList.removeAll(race.getDamageWeakness());		weaknessList.addAll(race.getDamageWeakness());		List<DamageType> immunList = new ArrayList<>(enemy.getDamageImmunity());		immunList.removeAll(race.getDamageImmunity());		immunList.addAll(race.getDamageImmunity());		resistanceToDamage.removeAll(weaknessList);		resistanceToDamage.removeAll(immunList);		List<DamageType> duplicates = immunList.stream()				.filter(immunity -> weaknessList.stream()						.anyMatch(weakness -> weakness.equals(immunity)))				.collect(Collectors.toList());		resistanceToDamage.addAll(duplicates);		resistanceToDamage.removeAll(immunList);		resistanceToDamage.sort(Comparator.comparing(DamageType::getName));		return resistanceToDamage;	}	public List<DamageType> getImmunityToDamage() {		if (!immunityToDamage.isEmpty()) {			return immunityToDamage;		}		immunityToDamage = new ArrayList<>(enemy.getDamageImmunity());		immunityToDamage.removeAll(race.getDamageImmunity());		immunityToDamage.addAll(race.getDamageImmunity());		List<DamageType> weaknessList = new ArrayList<>(enemy.getDamageWeakness());		weaknessList.removeAll(race.getDamageWeakness());		weaknessList.addAll(race.getDamageWeakness());		immunityToDamage.removeAll(weaknessList);		immunityToDamage.sort(Comparator.comparing(DamageType::getName));		return immunityToDamage;	}	/**	 * Weakness, Resistance and Immunity to Condition	 **/	private List<Condition> weaknessToCondition = new ArrayList<>();	private List<Condition> resistanceToCondition = new ArrayList<>();	private List<Condition> immunityToCondition = new ArrayList<>();	//Weakness	public List<Condition> getWeaknessToCondition() {		if (!weaknessToCondition.isEmpty()) {			return weaknessToCondition;		}		weaknessToCondition = new ArrayList<>(enemy.getConditionWeakness());		weaknessToCondition.removeAll(race.getConditionWeakness());		weaknessToCondition.addAll(race.getConditionWeakness());		weaknessToCondition.removeAll(race.getConditionResistance());		weaknessToCondition.removeAll(enemy.getConditionResistance());		weaknessToCondition.removeAll(race.getConditionImmunity());		weaknessToCondition.removeAll(enemy.getConditionImmunity());		weaknessToCondition.sort(Comparator.comparing(Condition::getName));		return weaknessToCondition;	}	public List<Condition> getResistanceToCondition() {		if (!resistanceToCondition.isEmpty()) {			return resistanceToCondition;		}		resistanceToCondition = new ArrayList<>(enemy.getConditionResistance());		resistanceToCondition.removeAll(race.getConditionResistance());		resistanceToCondition.addAll(race.getConditionResistance());		List<Condition> weaknessList = new ArrayList<>(enemy.getConditionWeakness());		weaknessList.removeAll(race.getConditionWeakness());		weaknessList.addAll(race.getConditionWeakness());		List<Condition> immunList = new ArrayList<>(enemy.getConditionImmunity());		immunList.removeAll(race.getConditionImmunity());		immunList.addAll(race.getConditionImmunity());		resistanceToCondition.removeAll(weaknessList);		resistanceToCondition.removeAll(immunList);		List<Condition> duplicates = immunList.stream()				.filter(immunity -> weaknessList.stream()						.anyMatch(weakness -> weakness.equals(immunity)))				.collect(Collectors.toList());		resistanceToCondition.addAll(duplicates);		resistanceToCondition.removeAll(immunList);		resistanceToCondition.sort(Comparator.comparing(Condition::getName));		return resistanceToCondition;	}	public List<Condition> getImmunityToCondition() {		if (!immunityToCondition.isEmpty()) {			return immunityToCondition;		}		immunityToCondition = new ArrayList<>(enemy.getConditionImmunity());		immunityToCondition.removeAll(race.getConditionImmunity());		immunityToCondition.addAll(race.getConditionImmunity());		List<Condition> weaknessList = new ArrayList<>(enemy.getConditionWeakness());		weaknessList.removeAll(race.getConditionWeakness());		weaknessList.addAll(race.getConditionWeakness());		immunityToCondition.removeAll(weaknessList);		immunityToCondition.sort(Comparator.comparing(Condition::getName));		return immunityToCondition;	}}